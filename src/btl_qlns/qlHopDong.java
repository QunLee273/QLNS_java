/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package btl_qlns;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class qlHopDong extends javax.swing.JFrame {

    ConnectDB cn = new ConnectDB();
    public qlHopDong() {
        initComponents();
        
        TableHD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ht_HD = new javax.swing.JTable();
        txt_tkhd = new javax.swing.JTextField();
        btn_tk = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_bd = new javax.swing.JTextField();
        txt_kt = new javax.swing.JTextField();
        txt_maNV = new javax.swing.JTextField();
        txt_luong = new javax.swing.JTextField();
        txt_quyen = new javax.swing.JTextField();
        btn_themHD = new javax.swing.JButton();
        btn_suaHD = new javax.swing.JButton();
        btn_xoaHD = new javax.swing.JButton();
        btn_thoat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Quản lý hợp đồng");

        ht_HD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MaHD", "MaNV", "Ngày BĐ", "Ngày KT", "Lương", "Quyền lợi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ht_HD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ht_HDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ht_HD);

        txt_tkhd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_tkhdKeyReleased(evt);
            }
        });

        btn_tk.setText("Tìm kiếm");
        btn_tk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tkActionPerformed(evt);
            }
        });

        jLabel3.setText("MaNV");

        jLabel4.setText("Ngày bắt đầu");

        jLabel5.setText("Ngày kết thúc");

        jLabel6.setText("Lương");

        jLabel7.setText("Quyền lợi");

        btn_themHD.setText("Thêm");
        btn_themHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_themHDActionPerformed(evt);
            }
        });

        btn_suaHD.setText("Sửa");
        btn_suaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_suaHDActionPerformed(evt);
            }
        });

        btn_xoaHD.setText("Xóa");
        btn_xoaHD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_xoaHDActionPerformed(evt);
            }
        });

        btn_thoat.setText("Quay lại");
        btn_thoat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_thoatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(txt_maNV))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(txt_kt))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_luong, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_quyen)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txt_bd)))
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_themHD)
                            .addComponent(btn_suaHD)
                            .addComponent(btn_xoaHD)
                            .addComponent(btn_thoat))
                        .addGap(67, 67, 67))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_tkhd, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_tk)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_themHD)
                    .addComponent(jLabel3)
                    .addComponent(txt_maNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_suaHD)
                    .addComponent(jLabel4)
                    .addComponent(txt_bd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_xoaHD)
                    .addComponent(jLabel5)
                    .addComponent(txt_kt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_luong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_thoat)
                    .addComponent(jLabel7)
                    .addComponent(txt_quyen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_tkhd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_tk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TableHD(){
        // Xóa dữ liệu hiện có trong bảng
        DefaultTableModel model = (DefaultTableModel) ht_HD.getModel();
        model.setRowCount(0);

        // Thực hiện truy vấn lấy dữ liệu từ cơ sở dữ liệu
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            // Thiết lập kết nối
            conn = cn.getConnection();
            stmt = conn.createStatement();

            // Thay đổi câu truy vấn
            String query = "SELECT * FROM hopdong;";
            rs = stmt.executeQuery(query);

            // Đổ dữ liệu từ ResultSet vào bảng
            while (rs.next()) {
                String mahd = rs.getString("MaHopDong");
                String manv = rs.getString("MaNV");
                String bd = rs.getString("NgayBatDau");
                String kt = rs.getString("NgayKetThuc");
                String luong = rs.getString("Luong");
                String ql = rs.getString("CheDoDaiNgo");
                

                // Thêm dữ liệu vào bảng
                model.addRow(new Object[]{mahd, manv, bd, kt, luong, ql});
            }

            // Đóng ResultSet, câu lệnh và kết nối
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu từ cơ sở dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btn_themHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_themHDActionPerformed

        String manv = txt_maNV.getText();
        String bd = txt_bd.getText();
        String kt = txt_kt.getText();
        String luong = txt_luong.getText();
        String ql = txt_quyen.getText();
        
        if (manv.isEmpty() || bd.isEmpty() || kt.isEmpty() || luong.isEmpty() || ql.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không được để trống bất kỳ thông tin nào!", "Thông báo!!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Thực hiện chèn dữ liệu vào cơ sở dữ liệu
        Connection conn = null;
        Statement stmt = null;
        Statement stmt1 = null;

        try {
            // Thiết lập kết nối
            conn = cn.getConnection();
            stmt = conn.createStatement();
            stmt1 = conn.createStatement();

            // Tạo và thực hiện câu truy vấn
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) AS SoLuong FROM nhanvien WHERE MaNV = '" + manv + "'");
            ResultSet rs1 = stmt1.executeQuery("SELECT COUNT(*) AS SoLuong1 FROM hopdong");
            
            // Lấy kết quả
            rs.next();
            rs1.next();
            int soLuong = rs.getInt("SoLuong");
            int soLuong1 = rs1.getInt("SoLuong1");

            // Nếu mã phòng ban không tồn tại thì hiển thị thông báo
            if (soLuong == 0) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String mahd = "hd" + (soLuong1 + 1);
            
            if (!bd.matches("\\d{4}-\\d{2}-\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Ngày bắt đầu không hợp lệ! Định dạng phải là yyyy-mm-dd", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!kt.matches("\\d{4}-\\d{2}-\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Ngày kết thúc không hợp lệ! Định dạng phải là yyyy-mm-dd", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Tạo câu truy vấn chèn dữ liệu
            String query = "INSERT INTO hopdong (MaHopDong, MaNV, NgayBatDau, NgayKetThuc, Luong, CheDoDaiNgo) "
                    + "VALUES ('" + mahd + "', '" + manv + "', '" + bd + "', '" + kt + "', '" + luong + "', '" + ql + "')";

            // Thực hiện câu truy vấn chèn dữ liệu
            stmt.executeUpdate(query);

            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Thêm dữ liệu thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            
            // Sau khi cập nhật thành công, xóa dữ liệu trong các ô nhập liệu
            txt_maNV.setText("");
            txt_bd.setText("");
            txt_kt.setText("");
            txt_luong.setText("");
            txt_quyen.setText("");
            
            // Đóng câu lệnh và kết nối
            stmt.close();
            stmt1.close();
            conn.close();
            
            // Tải lại dữ liệu và hiển thị trong bảng
            TableHD();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_themHDActionPerformed

    private void displayDataFromTable(int row) {
        // Lấy dữ liệu từ bảng theo hàng được chọn
        String manv = ht_HD.getValueAt(row, 1).toString();
        String bd = ht_HD.getValueAt(row, 2).toString();
        String kt = ht_HD.getValueAt(row, 3).toString();
        String luong = ht_HD.getValueAt(row, 4).toString();
        String ql = ht_HD.getValueAt(row, 5).toString();
        
        // Hiển thị dữ liệu lên các ô nhập liệu
        txt_maNV.setText(manv);
        txt_bd.setText(bd);
        txt_kt.setText(kt);
        txt_luong.setText(luong);
        txt_quyen.setText(ql);
    }
    
    private void ht_HDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ht_HDMouseClicked
        ht_HD.setDefaultEditor(Object.class, null);
        ht_HD.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                // Lấy chỉ mục hàng được chọn
                int selectedRow = ht_HD.getSelectedRow();
                
                // Hiển thị dữ liệu từ hàng được chọn vào các ô nhập liệu
                displayDataFromTable(selectedRow);
            }
        });
    }//GEN-LAST:event_ht_HDMouseClicked

    private void btn_suaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_suaHDActionPerformed
        // Lấy chỉ mục hàng được chọn trong bảng
        int selectedRow = ht_HD.getSelectedRow();

        // Kiểm tra xem có hàng nào được chọn không
        if (selectedRow == -1) {
            // Hiển thị thông báo lỗi nếu không có hàng nào được chọn
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để sửa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Lấy dữ liệu từ các thành phần trên form để sửa
        String mahd = ht_HD.getValueAt(selectedRow, 0).toString();;
        String manv = txt_maNV.getText();
        String bd = txt_bd.getText();
        String kt = txt_kt.getText();
        String luong = txt_luong.getText();
        String ql = txt_quyen.getText();

        // Thực hiện cập nhật dữ liệu vào cơ sở dữ liệu
        Connection conn = null;
        Statement stmt = null;

        try {
            // Thiết lập kết nối
            conn = cn.getConnection();
            stmt = conn.createStatement();
            
            if (manv.isEmpty() || bd.isEmpty() || kt.isEmpty() || luong.isEmpty() || ql.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không được để trống bất kỳ thông tin nào!", "Thông báo!!!", JOptionPane.ERROR_MESSAGE);
                return;
            }
                
            // Tạo và thực hiện câu truy vấn
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) AS SoLuong FROM nhanvien WHERE MaNV = '" + manv + "'");

            // Lấy kết quả
            rs.next();
            int soLuong = rs.getInt("SoLuong");

            // Nếu mã phòng ban không tồn tại thì hiển thị thông báo
            if (soLuong == 0) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (!bd.matches("\\d{4}-\\d{2}-\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Ngày bắt đầu không hợp lệ! Định dạng phải là yyyy-mm-dd", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!kt.matches("\\d{4}-\\d{2}-\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Ngày kết thúc không hợp lệ! Định dạng phải là yyyy-mm-dd", "Thông báo", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Tạo câu truy vấn cập nhật dữ liệu
            String query = "UPDATE hopdong "
                            + "SET MaNV = '" + manv + "', NgayBatDau = '" + bd + "', NgayKetThuc = '" + kt + "', Luong = '" + luong + "', CheDoDaiNgo = '" + ql + "' " 
                            + "WHERE MaHopDong  = '" + mahd + "'";

            // Thực hiện câu truy vấn cập nhật dữ liệu
            stmt.executeUpdate(query);

            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Sửa dữ liệu thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

            // Sau khi cập nhật thành công, xóa dữ liệu trong các ô nhập liệu
            txt_maNV.setText("");
            txt_bd.setText("");
            txt_kt.setText("");
            txt_luong.setText("");
            txt_quyen.setText("");  
                   
            // Đóng câu lệnh và kết nối
            stmt.close();
            conn.close();
            
            // Tải lại dữ liệu và hiển thị trong bảng
            TableHD();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_suaHDActionPerformed

    private void btn_xoaHDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_xoaHDActionPerformed
        int selectedRow = ht_HD.getSelectedRow();

        // Kiểm tra xem có hàng nào được chọn không
        if (selectedRow == -1) {
            // Hiển thị thông báo lỗi nếu không có hàng nào được chọn
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hàng để xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Lấy dữ liệu từ các thành phần trên form để xóa
        String mahd = ht_HD.getValueAt(selectedRow, 0).toString();;

        // Thực hiện cập nhật dữ liệu vào cơ sở dữ liệu
        Connection conn = null;
        Statement stmt = null;

        try {
            // Thiết lập kết nối
            conn = cn.getConnection();
            stmt = conn.createStatement();

            // Tạo câu truy vấn cập nhật dữ liệu
            String query = "DELETE FROM hopdong WHERE MaHopDong  = '" + mahd + "'";

            // Thực hiện câu truy vấn cập nhật dữ liệu
            stmt.executeUpdate(query);

            // Đóng câu lệnh và kết nối
            stmt.close();
            conn.close();

            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Xóa dữ liệu thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            
            // Sau khi cập nhật thành công, xóa dữ liệu trong các ô nhập liệu
            txt_maNV.setText("");
            txt_bd.setText("");
            txt_kt.setText("");
            txt_luong.setText("");
            txt_quyen.setText("");  
            
            // Tải lại dữ liệu và hiển thị trong bảng
            TableHD();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_xoaHDActionPerformed

    private void txt_tkhdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_tkhdKeyReleased
        // Kiểm tra xem ô tìm kiếm có trống hay không
        if (txt_tkhd.getText().isEmpty()) {
            // Load lại bảng
            TableHD();
        }
    }//GEN-LAST:event_txt_tkhdKeyReleased

    private void btn_tkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tkActionPerformed
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            // Kết nối đến cơ sở dữ liệu MySQL
            conn = cn.getConnection();

            // Nhập từ khóa tìm kiếm từ người dùng
            String keyword = txt_tkhd.getText();

            // Tạo một câu lệnh truy vấn SQL với điều kiện tìm kiếm
            String query = "SELECT * FROM hopdong "
                            + "WHERE MaHopDong  LIKE '%" + keyword + "%' OR MaNV LIKE '%" + keyword + "%' OR NgayBatDau LIKE '%" + keyword + "%' "
                            + "OR NgayKetThuc LIKE '%" + keyword + "%' OR Luong LIKE '%" + keyword + "%' OR CheDoDaiNgo LIKE '%" + keyword + "%'";

            // Tạo một câu lệnh truy vấn SQL
            stmt = conn.createStatement();

            // Thực hiện truy vấn tìm kiếm trong bảng NHANVIEN và lưu kết quả vào ResultSet
            rs = stmt.executeQuery(query);

            // Kiểm tra xem có kết quả tìm kiếm hay không
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy kết quả!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Tạo một DefaultTableModel để lưu dữ liệu từ ResultSet
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("MaHD");
                model.addColumn("MaNV");
                model.addColumn("Ngày BĐ");
                model.addColumn("Ngày KT");
                model.addColumn("Lương");
                model.addColumn("Quyền lợi");

                // Đọc dữ liệu từ ResultSet và thêm vào DefaultTableModel
                while (rs.next()) {
                    String mahd = rs.getString("MaHopDong");
                    String manv = rs.getString("MaNV");
                    String bd = rs.getString("NgayBatDau");
                    String kt = rs.getString("NgayKetThuc");
                    String luong = rs.getString("Luong");
                    String ql = rs.getString("CheDoDaiNgo");

                    Object[] rowData = {mahd, manv, bd, kt, luong, ql};
                    model.addRow(rowData);
                }

                // Hiển thị dữ liệu từ DefaultTableModel vào JTable
                ht_HD.setModel(model);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Đóng ResultSet, Statement và Connection để giải phóng tài nguyên
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_tkActionPerformed

    private void btn_thoatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_thoatActionPerformed
        int tb = JOptionPane.showConfirmDialog(this, "Chắc chắn muốn thoát không!", "Thông báo!!!", JOptionPane.YES_NO_OPTION);
        if (tb != JOptionPane.YES_OPTION){
            return;
        }
        qlHopDong.this.setVisible(false);
        new MainF().setVisible(true);
    }//GEN-LAST:event_btn_thoatActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(qlHopDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(qlHopDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(qlHopDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(qlHopDong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new qlHopDong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_suaHD;
    private javax.swing.JButton btn_themHD;
    private javax.swing.JButton btn_thoat;
    private javax.swing.JButton btn_tk;
    private javax.swing.JButton btn_xoaHD;
    private javax.swing.JTable ht_HD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_bd;
    private javax.swing.JTextField txt_kt;
    private javax.swing.JTextField txt_luong;
    private javax.swing.JTextField txt_maNV;
    private javax.swing.JTextField txt_quyen;
    private javax.swing.JTextField txt_tkhd;
    // End of variables declaration//GEN-END:variables
}
